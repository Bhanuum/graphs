class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool is(int i, vector<int> adj[],vector<int>&visited) {
        // Code here
    // vector<int>visited(v+1,0);
     queue<pair<int,int>>q;
     q.push({i,-1});
     visited[i]=1;
     while(!q.empty())
     {
         int child=q.front().first;
         int parent=q.front().second;
         q.pop();
         for(auto it:adj[child])
         {
             if(visited[it]==0)
             {
                 q.push({it,child});
                 visited[it]=1;
             }
             else if(it!=parent)
             {
                 return true;
             }
             
         }
         
     }
     return false;
     
    }
    bool isCycle(int v,vector<int>adj[])
    {
        vector<int>visited(v+1,0);
        for(int i=0;i<v;i++)
        {
            if(visited[i]==0)
            {
                if(is(i,adj,visited))return true;
                
            }
        }
        return false;
    }
};
